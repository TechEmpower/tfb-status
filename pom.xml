<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>tfb</groupId>
  <artifactId>tfb-status</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <maven.compiler.release>18</maven.compiler.release>

    <oldestCompatibleMavenVersion>3.5.0</oldestCompatibleMavenVersion>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <bcrypt.version>0.4</bcrypt.version>
    <build-helper-maven-plugin.version>3.3.0</build-helper-maven-plugin.version>
    <caffeine.version>3.0.6</caffeine.version>
    <checkerframework.version>3.21.4</checkerframework.version>
    <crawler-commons.version>1.2</crawler-commons.version>
    <error-prone.version>2.12.1</error-prone.version>
    <extra-enforcer-rules.version>1.5.1</extra-enforcer-rules.version>
    <git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
    <greenmail.version>2.0.0-alpha-2</greenmail.version>
    <guava.version>31.1-jre</guava.version>
    <hk2.version>3.0.2</hk2.version>
    <jackson.version>2.13.2.1</jackson.version>
    <jakarta-activation.version>2.0.1</jakarta-activation.version>
    <jakarta-inject.version>2.0.1</jakarta-inject.version>
    <jakarta-mail.version>2.0.1</jakarta-mail.version>
    <jimfs.version>1.2</jimfs.version>
    <jmh.version>1.35</jmh.version>
    <junit-jupiter.version>5.8.2</junit-jupiter.version>
    <logback.version>1.2.11</logback.version>
    <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
    <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
    <maven-dependency-plugin.version>3.3.0</maven-dependency-plugin.version>
    <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
    <maven-enforcer-plugin.version>3.0.0</maven-enforcer-plugin.version>
    <maven-install-plugin.version>2.5.2</maven-install-plugin.version>
    <maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
    <maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
    <maven-site-plugin.version>3.11.0</maven-site-plugin.version>
    <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
    <mustache.version>0.9.10</mustache.version>
    <slf4j.version>1.7.36</slf4j.version>
    <threeten-extra.version>1.7.0</threeten-extra.version>
    <undertow.version>2.2.17.Final</undertow.version>
    <versions-maven-plugin.version>2.10.0</versions-maven-plugin.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>${checkerframework.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <version>${error-prone.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
      <exclusions>
        <!-- The jsr305 jar causes problems when trying to use Java modules
             because it defines classes in the javax.annotation package, which
             it doesn't own.  We're not using modules yet, but we're not using
             jsr305 either, so we can remove this roadblock to modules right
             now without harm. -->
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.undertow</groupId>
      <artifactId>undertow-core</artifactId>
      <version>${undertow.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.spullara.mustache.java</groupId>
      <artifactId>compiler</artifactId>
      <version>${mustache.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-guava</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mindrot</groupId>
      <artifactId>jbcrypt</artifactId>
      <version>${bcrypt.version}</version>
    </dependency>
    <!-- We'll replace this dependency:
           com.sun.mail:jakarta.mail
         with these two:
           jakarta.mail:jakarta.mail-api
           org.eclipse.angus:jakarta.mail
         when both of the new dependencies have stable releases.
    -->
    <dependency>
      <groupId>com.sun.mail</groupId>
      <artifactId>jakarta.mail</artifactId>
      <version>${jakarta-mail.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <!-- We'll replace this dependency:
           com.sun.activation:jakarta.activation
         with these two:
           jakarta.activation:jakarta.activation-api
           org.eclipse.angus:angus-activation
         when both of the new dependencies have stable releases.
    -->
    <dependency>
      <groupId>com.sun.activation</groupId>
      <artifactId>jakarta.activation</artifactId>
      <version>${jakarta-activation.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.inject</groupId>
      <artifactId>jakarta.inject-api</artifactId>
      <version>${jakarta-inject.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-api</artifactId>
      <version>${hk2.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-locator</artifactId>
      <version>${hk2.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-utils</artifactId>
      <version>${hk2.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-extras</artifactId>
      <version>${hk2.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>${caffeine.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.threeten</groupId>
      <artifactId>threeten-extra</artifactId>
      <version>${threeten-extra.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.icegreen</groupId>
      <artifactId>greenmail</artifactId>
      <version>${greenmail.version}</version>
      <scope>test</scope>
      <exclusions>
        <!-- Having both JUnit 4 and JUnit 5 on our classpath is an unacceptable
             state of affairs.  We'd rather get rid of GreenMail (and all tests
             that rely on it) than tolerate JUnit 4 on our classpath.  Luckily,
             it appears that we can exclude GreenMail's JUnit 4 dependency
             without breaking the parts of GreenMail that we use. -->
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
        <!-- The javax.mail package is now maintained in the jakarta.mail
             artifact, which we include as a dependency.  This other javax.mail
             artifact is obsolete. -->
        <exclusion>
          <groupId>com.sun.mail</groupId>
          <artifactId>javax.mail</artifactId>
        </exclusion>
        <!-- GreenMail changed its activation dependency from:
               com.sun.activation:jakarta.activation
             to:
               jakarta.activation:jakarta.activation-api
             but the latter is not ready for use.  The implementation for that
             API is:
               org.eclipse.angus:angus-activation
             which does not have a stable release.  Therefore, we retain the old
             activation dependency for now and exclude this one.
        -->
        <exclusion>
          <groupId>jakarta.activation</groupId>
          <artifactId>jakarta.activation-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.crawler-commons</groupId>
      <artifactId>crawler-commons</artifactId>
      <version>${crawler-commons.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.jimfs</groupId>
      <artifactId>jimfs</artifactId>
      <version>${jimfs.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>${jmh.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>io.github.git-commit-id</groupId>
          <artifactId>git-commit-id-maven-plugin</artifactId>
          <version>${git-commit-id-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven-clean-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven-dependency-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven-deploy-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven-enforcer-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>extra-enforcer-rules</artifactId>
              <version>${extra-enforcer-rules.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven-install-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven-jar-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven-resources-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven-site-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${build-helper-maven-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Treat the benchmark directory as test-scoped source code. -->
      <!-- TODO: Figure out how to create an executable benchmarks.jar with
                 this code. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-benchmark-sources</id>
            <phase>generate-test-sources</phase>
            <goals><goal>add-test-source</goal></goals>
            <configuration>
              <sources>
                <source>src/benchmark/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Make the output of "mvn versions display-dependency-updates" more
           useful by ignoring versions that we don't want to use. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <configuration>
          <rulesUri>file://${basedir}/maven-version-rules.xml</rulesUri>
        </configuration>
      </plugin>

      <!-- Show full stack traces in test errors. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <trimStackTrace>false</trimStackTrace>
        </configuration>
      </plugin>

      <!-- Ignore false flags from "mvn dependency:analyze" for a few specific
           dependencies.  Also, copy our dependency jar files out of the local
           Maven repository and into a "lib" directory. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <ignoredUnusedDeclaredDependencies>

            <!-- Without the logback-classic dependency, we wouldn't have any
                 implementation of the slf4j API, and so all of our log
                 statements throughout this application would do nothing. -->
            <ignoredUnusedDeclaredDependency>ch.qos.logback:logback-classic</ignoredUnusedDeclaredDependency>

            <!-- Without the hk2-locator dependency, we wouldn't be able to
                 create instances of the ServiceLocator class at runtime, and so
                 our application would fail almost immediately upon startup. -->
            <ignoredUnusedDeclaredDependency>org.glassfish.hk2:hk2-locator</ignoredUnusedDeclaredDependency>

            <!-- Without the junit-jupiter-engine dependency, our tests wouldn't
                 run at all. -->
            <ignoredUnusedDeclaredDependency>org.junit.jupiter:junit-jupiter-engine</ignoredUnusedDeclaredDependency>

          </ignoredUnusedDeclaredDependencies>
          <ignoredUsedUndeclaredDependencies>

            <!-- We always want to use the version of xnio-api that is picked up
                 from our dependency on undertow.  If we declared our own
                 xnio-api dependency, then we would have to specify the version
                 ourselves, and that would introduce the possibility of us
                 specifying the wrong version. -->
            <ignoredUsedUndeclaredDependency>org.jboss.xnio:xnio-api</ignoredUsedUndeclaredDependency>

          </ignoredUsedUndeclaredDependencies>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- When we build this project, we generate a git.properties file that
           describes the current state of the git repository.  This helps us
           figure out which version of the code is contained in the build. -->
      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
        <configuration>
          <offline>true</offline>
          <failOnNoGitDirectory>false</failOnNoGitDirectory>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- We enable warnings from javac that are disabled by default. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>

          <!-- https://issues.apache.org/jira/browse/MCOMPILER-209 -->
          <useIncrementalCompilation>false</useIncrementalCompilation>

          <compilerArgs>
            <arg>-Xlint:all,-processing</arg>
            <arg>-Xdoclint:all,-missing</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>org.openjdk.jmh</groupId>
              <artifactId>jmh-generator-annprocess</artifactId>
              <version>${jmh.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!-- Enable some additional validation of the build environment and our
           dependencies. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules>
            <requireMavenVersion>
              <version>${oldestCompatibleMavenVersion}</version>
            </requireMavenVersion>
            <banDuplicateClasses>
              <findAllDuplicates>true</findAllDuplicates>
            </banDuplicateClasses>
            <bannedDependencies>
              <excludes>
                <!-- We use JUnit 5, so we cannot allow JUnit 4 as a dependency.
                     Having both on our classpath at once would be unacceptably
                     confusing. -->
                <exclude>junit:junit</exclude>

                <!-- jsr305 cannot be allowed if we ever want to use Java
                     modules. -->
                <exclude>com.google.code.findbugs:jsr305</exclude>

                <!-- We use jakarta.mail, which is the replacement for the
                     now-obsolete javax.mail. -->
                <exclude>com.sun.mail:javax.mail</exclude>

                <!-- jakarta.activation-api is not ready for use because there's
                     no stable release of the implementation for that API. -->
                <exclude>jakarta.activation:jakarta.activation-api</exclude>
              </excludes>
            </bannedDependencies>
          </rules>
        </configuration>
        <executions>
          <execution>
            <!-- Delay execution until our <scope>test</scope> dependencies are
                 resolved.  In earlier phases, the <bannedDependencies> rule
                 might trigger unhelpful warnings like this: "Could not find
                 some:library:jar:1.0:test at null". -->
            <phase>test-compile</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Omit the version number from the name of the jar file we build.  Make
           that jar file executable.  Automatically add classpath entries for
           dependencies, which must live in a "lib" directory next to the jar
           file. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <finalName>tfb-status</finalName>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>tfb.status.bootstrap.Main</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
